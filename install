#!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby

BOXEN_PREFIX = '/opt/boxen'
BOXEN_REPO = "#{BOXEN_PREFIX}/repo"
BOXEN_REMOTE = 'https://github.com/makersacademy/our-boxen'

module Tty extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end

def ohai *args
  puts "#{Tty.blue}==>#{Tty.white} #{args.shell_s}#{Tty.reset}"
end

def warn warning
  puts "#{Tty.red}Warning#{Tty.reset}: #{warning.chomp}"
end

def system *args
  abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def sudo *args
  ohai "/usr/bin/sudo", *args
  system "/usr/bin/sudo", *args
end

def getc  # NOTE only tested on OS X
  system "/bin/stty raw -echo"
  if STDIN.respond_to?(:getbyte)
    STDIN.getbyte
  else
    STDIN.getc
  end
ensure
  system "/bin/stty -raw echo"
end

def wait_for_user
  puts
  puts "Press RETURN to continue or any other key to abort"
  c = getc
  # we test for \r and \n because some stuff does \r instead
  abort unless c == 13 or c == 10
end

module Version
  def <=>(other)
    split(".").map { |i| i.to_i } <=> other.split(".").map { |i| i.to_i }
  end
end

def macos_version
  @macos_version ||= `/usr/bin/sw_vers -productVersion`.chomp[/10\.\d+/].extend(Version)
end

def git
  @git ||= if ENV['GIT'] and File.executable? ENV['GIT']
    ENV['GIT']
  elsif Kernel.system '/usr/bin/which -s git'
    'git'
  else
    exe = `xcrun -find git 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  return unless @git
  # Github only supports HTTPS fetches on 1.7.10 or later:
  # https://help.github.com/articles/https-cloning-errors
  `#{@git} --version` =~ /git version (\d\.\d+\.\d+)/
  return if $1.nil? or $1.extend(Version) < "1.7.10"

  @git
end

def ensure_directory dir
  if File.directory? dir
    sudo "/bin/chmod", "g+rwx", dir
    sudo "/usr/bin/chgrp", "staff", dir
  else
    sudo "/bin/mkdir", "-p", dir
    sudo "/bin/chmod", "g+rwx", dir
    # the group is set to wheel by default for some reason
    sudo "/usr/bin/chgrp", "staff", dir
  end
end

def add_boxen_to_shell! shell
  boxen = "[ -f /opt/boxen/env.sh ] && source /opt/boxen/env.sh"
  cmd = "touch #{shell} && grep -Fxq \"#{boxen}\" #{shell} || echo \"#{boxen}\" >> #{shell}"
  system cmd
end

def update_environment! shell
  system "source #{shell}"
end

# Invalidate sudo timestamp before exiting
at_exit { Kernel.system "/usr/bin/sudo", "-k" }

# The block form of Dir.chdir fails later if Dir.CWD doesn't exist which I
# guess is fair enough. Also sudo prints a warning message for no good reason
Dir.chdir "/usr"

####################################################################### script
abort "See Linuxbrew: http://brew.sh/linuxbrew/" if /linux/i === RUBY_PLATFORM
abort "MacOS too old" if macos_version < "10.5"
abort "Don't run this as root!" if Process.uid == 0
abort <<-EOABORT unless `groups`.split.include? "admin"
This script requires the user #{ENV['USER']} to be an Administrator.
EOABORT

ohai "This script will install:"
puts "#{BOXEN_PREFIX}/repo"

chmods = %w( BOXEN_PREFIX ).
         select{ |d| File.directory? d and (not File.readable? d or not File.writable? d or not File.executable? d) }
chgrps = chmods.reject{ |d| File.stat(d).grpowned? }

unless chmods.empty?
  ohai "The following directories will be made group writable:"
  puts(*chmods)
end
unless chgrps.empty?
  ohai "The following directories will have their group set to #{Tty.underline 39}staff#{Tty.reset}:"
  puts(*chgrps)
end

wait_for_user if STDIN.tty?

ensure_directory BOXEN_PREFIX

if macos_version >= "10.9"
  developer_dir = `/usr/bin/xcode-select -print-path 2>/dev/null`.chomp
  if developer_dir.empty? || !File.exist?("#{developer_dir}/usr/bin/git")
    ohai "Installing the Command Line Tools (expect a GUI popup):"
    sudo "/usr/bin/xcode-select", "--install"
    puts "Press any key when the installation has completed."
    getc
  end
end

ohai "Downloading Makers setup..."

ensure_directory BOXEN_REPO

Dir.chdir BOXEN_REPO do
  
  if git
    # we do it in four steps to avoid merge errors when reinstalling
    system git, "init", "-q"

    # "git remote add" will fail if the remote is defined in the global config
    system git, "config", "remote.origin.url", BOXEN_REMOTE
    system git, "config", "remote.origin.fetch", "+refs/heads/*:refs/remotes/origin/*"

    args = git, "fetch", "origin", "master:refs/remotes/origin/master", "-n"
    args << "--depth=1" if ARGV.include? "--fast"
    system(*args)

    system git, "reset", "--hard", "origin/master"
  else
    # -m to stop tar erroring out if it can't modify the mtime for root owned directories
    # pipefail to cause the exit status from curl to propogate if it fails
    # we use -k for curl because Leopard has a bunch of bad SSL certificates
    curl_flags = "fsSL"
    curl_flags << "k" if macos_version <= "10.5"
    system "/bin/bash -o pipefail -c '/usr/bin/curl -#{curl_flags} #{BOXEN_REMOTE}/tarball/master | /usr/bin/tar xz -m --strip 1'"
  end
end

ohai "Running Makers setup..."
boxen_command = "#{BOXEN_REPO}/script/boxen"
# We run this twice because the first invokation always retuns a non-zero exit code
Kernel.system boxen_command
ohai "Refreshing Makers setup..."
system boxen_command

shellfile = "~/.bashrc"
ohai "Adding boxen to #{shellfile}"
add_boxen_to_shell! shellfile

ohai "Installation successful!"
puts <<-MAKE
                __            
  _____ _____  |  | __ ____   
 /     \\__   \\ |  |/ // __ \\
|  Y Y  \\/ __ \\|    <\\  ___/  
|__|_|  (____  /__|_ \\\\___  > 
      \\/     \\/     \\/    \\/  

    Go forth and make!


MAKE

ohai "Changes will take effect in new terminal windows"
